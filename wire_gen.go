// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package part

import (
	"errors"
	"fmt"
	"github.com/Montrealist-cPunto/commons/config"
	"github.com/Montrealist-cPunto/commons/log"
	"github.com/Montrealist-cPunto/goseanto"
	"os"
	"sync"
)

// Injectors from wire.go:

func MustSearchLambda(appConfig2 *AppConfig) *SearchLambda {
	config := ProvideLibConfig(appConfig2)
	searchService := goseanto.MustSearchService(config)
	logger := log.MustLogger(config)
	searchLambda := &SearchLambda{
		Service: searchService,
		Logger:  logger,
	}
	return searchLambda
}

func MustHinterLambda(appConfig2 *AppConfig) *HinterLambda {
	config := ProvideLibConfig(appConfig2)
	hinter := goseanto.MustHinterService(config)
	logger := log.MustLogger(config)
	hinterLambda := &HinterLambda{
		Service: hinter,
		Logger:  logger,
	}
	return hinterLambda
}

func MustDetailsLambda(appConfig2 *AppConfig) *DetailsLambda {
	config := ProvideLibConfig(appConfig2)
	searchService := goseanto.MustSearchService(config)
	logger := log.MustLogger(config)
	detailsLambda := &DetailsLambda{
		Service: searchService,
		Logger:  logger,
	}
	return detailsLambda
}

// wire.go:

var onceLibConfig sync.Once

var libConfig *config.Config

func ProvideLibConfig(appConfig2 *AppConfig) *config.Config {
	if libConfig == nil {
		panic(errors.New("libConfig not inited"))
	}
	return libConfig
}

var onceAppConfig sync.Once

var appConfig *AppConfig

func ProvideAppConfig(dir string) *AppConfig {
	onceAppConfig.Do(func() {
		cfg := config.LoadFromDirectory(dir)
		appConfig = &AppConfig{
			Config: cfg,
		}
	})
	onceLibConfig.Do(func() {
		libConfig = config.LoadFromDirectory(dir,
			"goseanto.yml", fmt.Sprintf("goseanto-%s.yml", os.Getenv("app_env")))

		_ = libConfig.MergeAt(appConfig.Config.Koanf, "log")
	})

	return appConfig
}
